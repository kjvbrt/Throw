#!/bin/bash

WORK_DIR=`pwd`
BUILD_DIR=`pwd`"/Build"
TEST_DIR=`pwd`"/Test"
INSTALL_DIR=${HOME}/.local/throw

# https://stackoverflow.com/questions/192249
POSITIONAL=()
KEY="${1}"
while [[ $# -gt 0 ]]; do
    case ${KEY} in
        -h|--help)
            HELP=true
            shift
            ;;
        -c|--clean)
            CLEAN=true
            shift
            ;;
        -t|--test)
            TEST=true
            shift
            ;;
        -i|--install)
            INSTALL=true
            shift
            ;;
        -p|--pack)
            PACK=true
            shift
            ;;
        -u|--upload)
            UPLOAD=true
            shift
            ;;
        -d|--documentation)
            DOCUMENTATION=true
            shift
            ;;
         *)
            POSITIONAL+=("${1}")
            shift
            ;;
    esac
done
set -- "${POSITIONAL[@]}"

if [ "${HELP}" = true ]; then
    echo "Usage: ./Make [-h, -c, -t, -i, -p, -u, -d]"
    echo
    echo "      -h, --help           Show this help"
    echo "      -c, --clean          Clean build directory"
    echo "      -t, --test           Test the library"
    echo "      -i, --install        Test the library"
    echo "      -p, --pack           Pack the library to tar.gz file"
    echo "      -u, --upload         Upload the library to kjvbrt.org"
    echo "      -d, --documentation  Compile documentation"
    exit
fi

if [ "${CLEAN}" == true ]; then
  echo "INFO: Cleaning \"${BUILD_DIR}\" directory..."
  rm -rf ${BUILD_DIR}/*
  rm -rf ${TEST_DIR}/*
  rm ${WORK_DIR}/Throw.tar.gz
  exit
fi

echo "INFO: Building..."

if [ ! -d "${BUILD_DIR}" ]; then
  echo "WARNING: Build directory \"${BUILD_DIR}\" does not exist, creating it."
  mkdir ${BUILD_DIR}
fi
cd ${BUILD_DIR}

if [ -x "$(command -v cmake)" ]; then
  cmake ${WORK_DIR}
else
  echo "WARNING: \"cmake\" not found, trying \"cmake3\"."
  cmake3 ${WORK_DIR}
fi

make
SUCCESS=$?

if [ ${SUCCESS} -eq 0 ] && [ "${TEST}" == true ]; then
  echo "INFO: Testing..."
  cp ${BUILD_DIR}/Test ${TEST_DIR}/
  cd ${TEST_DIR}
  ./Test
fi

if [ ${SUCCESS} -eq 0 ] && [ "${INSTALL}" == true ]; then
  echo "INFO: Installing..."
  cd ${WORK_DIR}
  if [ ! -d "${INSTALL_DIR}/include" ]; then
    echo "WARNING: Install include directory does not exist, creating it."
    mkdir -p ${INSTALL_DIR}/include
  fi
  cp Throw.h ${INSTALL_DIR}/include/

  if [ ! -d "${INSTALL_DIR}/lib" ]; then
    echo "WARNING: Install lib directory does not exist, creating it."
    mkdir -p ${INSTALL_DIR}/lib
  fi
  cp ${BUILD_DIR}/libThrow.a ${INSTALL_DIR}/lib/
fi

if [ ${SUCCESS} -eq 0 ] && [ "${PACK}" == true ]; then
  echo "INFO: Packing..."
  cd ${WORK_DIR}
  tar -czvf Throw.tar.gz Throw.h Throw*cxx Build/libThrow.a README.md LICENSE
fi

if [ ${SUCCESS} -eq 0 ] && [ "${UPLOAD}" == true ]; then
  echo "INFO: Uploading..."
  cd ${WORK_DIR}
  scp Throw.tar.gz boltzmann:/var/www/kjvbrt.org/Throw/
  if [ $? -ne 0 ]; then
    echo "ERROR: Problem with upload!"
    exit 1
  else
    rm Throw.tar.gz
  fi
fi

if [ ${SUCCESS} -eq 0 ] && [ "${DOCUMENTATION}" == true ]; then
  echo "INFO: Compiling documentation..."
  cd ${WORK_DIR}
  doxygen
  scp -r Documentation/html/* boltzmann:/var/www/kjvbrt.org/Throw/Documentation/
  if [ $? -ne 0 ]; then
    echo "ERROR: Problem with documentation upload!"
    exit 1
  fi
fi

exit ${SUCCESS}
